{"version":3,"sources":["../src/StorageProvider.js"],"names":["StorageProvider","options","target","json","prefix","get","key","value","getItem","resolveValue","JSON","parse","Promise","then","error","StorageProviderError","set","maybePromise","undefined","removeItem","setItem","stringify","remove"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;;;AAGA,SAASA,eAAT,GAAuC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACrC,MAAMC,MAAM,GAAGD,OAAO,CAACC,MAAvB;AAEAD,EAAAA,OAAO,CAACE,IAAR,GAAe,UAAUF,OAAV,GAAoBA,OAAO,CAACE,IAA5B,GAAmC,IAAlD;AACAF,EAAAA,OAAO,CAACG,MAAR,GAAiBH,OAAO,CAACG,MAAR,GAAiBH,OAAO,CAACG,MAAR,GAAiB,GAAlC,GAAwC,EAAzD;AAEA,SAAO,wBAAS;AACdC,IAAAA,GADc,eACVC,GADU,EACL;AACP,UAAMC,KAAK,GAAGL,MAAM,CAACM,OAAP,CAAeP,OAAO,CAACG,MAAR,GAAiBE,GAAhC,CAAd;;AAEA,eAASG,YAAT,CAAsBF,KAAtB,EAA6B;AAC3B,YAAIN,OAAO,CAACE,IAAR,IAAgBI,KAApB,EAA2B;AACzB,iBAAOG,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAP;AACD;;AAED,eAAOA,KAAP;AACD;;AAED,UAAIA,KAAK,YAAYK,OAArB,EAA8B;AAC5B,eAAOL,KAAK,CAACM,IAAN,CAAWJ,YAAX,WAA+B,UAACK,KAAD,EAAW;AAC/C,gBAAM,IAAIC,gCAAJ,CAAyBD,KAAzB,CAAN;AACD,SAFM,CAAP;AAGD;;AAED,aAAOL,YAAY,CAACF,KAAD,CAAnB;AACD,KAnBa;AAoBdS,IAAAA,GApBc,eAoBVV,GApBU,EAoBLC,KApBK,EAoBE;AACd,UAAMU,YAAY,GAChBV,KAAK,KAAKW,SAAV,GACIhB,MAAM,CAACiB,UAAP,CAAkBlB,OAAO,CAACG,MAAR,GAAiBE,GAAnC,CADJ,GAEIJ,MAAM,CAACkB,OAAP,CACEnB,OAAO,CAACG,MAAR,GAAiBE,GADnB,EAEEL,OAAO,CAACE,IAAR,GAAeO,IAAI,CAACW,SAAL,CAAed,KAAf,CAAf,GAAuCA,KAFzC,CAHN;;AAQA,UAAIU,YAAY,YAAYL,OAA5B,EAAqC;AACnC,eAAOK,YAAY,SAAZ,CAAmB,UAACH,KAAD,EAAW;AACnC,gBAAM,IAAIC,gCAAJ,CAAyBD,KAAzB,CAAN;AACD,SAFM,CAAP;AAGD;AACF,KAlCa;AAmCdQ,IAAAA,MAnCc,kBAmCPhB,GAnCO,EAmCF;AACV,UAAMW,YAAY,GAAGf,MAAM,CAACiB,UAAP,CAAkBlB,OAAO,CAACG,MAAR,GAAiBE,GAAnC,CAArB;;AAEA,UAAIW,YAAY,YAAYL,OAA5B,EAAqC;AACnC,eAAOK,YAAY,SAAZ,CAAmB,UAACH,KAAD,EAAW;AACnC,gBAAM,IAAIC,gCAAJ,CAAyBD,KAAzB,CAAN;AACD,SAFM,CAAP;AAGD;AACF;AA3Ca,GAAT,CAAP;AA6CD;;eAEcd,e","sourcesContent":["import { Provider } from 'cerebral'\nimport StorageProviderError from './StorageProviderError'\nexport { default as StorageProviderError } from './StorageProviderError'\n\nfunction StorageProvider(options = {}) {\n  const target = options.target\n\n  options.json = 'json' in options ? options.json : true\n  options.prefix = options.prefix ? options.prefix + '.' : ''\n\n  return Provider({\n    get(key) {\n      const value = target.getItem(options.prefix + key)\n\n      function resolveValue(value) {\n        if (options.json && value) {\n          return JSON.parse(value)\n        }\n\n        return value\n      }\n\n      if (value instanceof Promise) {\n        return value.then(resolveValue).catch((error) => {\n          throw new StorageProviderError(error)\n        })\n      }\n\n      return resolveValue(value)\n    },\n    set(key, value) {\n      const maybePromise =\n        value === undefined\n          ? target.removeItem(options.prefix + key)\n          : target.setItem(\n              options.prefix + key,\n              options.json ? JSON.stringify(value) : value\n            )\n\n      if (maybePromise instanceof Promise) {\n        return maybePromise.catch((error) => {\n          throw new StorageProviderError(error)\n        })\n      }\n    },\n    remove(key) {\n      const maybePromise = target.removeItem(options.prefix + key)\n\n      if (maybePromise instanceof Promise) {\n        return maybePromise.catch((error) => {\n          throw new StorageProviderError(error)\n        })\n      }\n    },\n  })\n}\n\nexport default StorageProvider\n"],"file":"StorageProvider.js"}