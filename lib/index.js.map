{"version":3,"sources":["../src/index.js"],"names":["options","name","controller","once","targetStorage","target","localStorage","Object","keys","sync","forEach","syncKey","value","getItem","prefix","path","split","model","set","json","JSON","parse","on","changes","change","join","indexOf","getState","undefined","removeItem","setItem","stringify","providers"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;;eAEe,kBAACA,OAAD,EAAa;AAC1B,SAAO,sBAAO,gBAA0B;AAAA,QAAvBC,IAAuB,QAAvBA,IAAuB;AAAA,QAAjBC,UAAiB,QAAjBA,UAAiB;AACtCA,IAAAA,UAAU,CAACC,IAAX,CAAgB,mBAAhB,EAAqC,YAAM;AACzC,UAAMC,aAAa,GAAGJ,OAAO,CAACK,MAAR,IAAkBC,YAAxC;AAEAC,MAAAA,MAAM,CAACC,IAAP,CAAYR,OAAO,CAACS,IAAR,IAAgB,EAA5B,EAAgCC,OAAhC,CAAwC,UAACC,OAAD,EAAa;AACnD,YAAMC,KAAK,GAAGR,aAAa,CAACS,OAAd,CAAsBb,OAAO,CAACc,MAAR,GAAiBH,OAAvC,CAAd;;AAEA,YAAI,CAACC,KAAL,EAAY;AACV;AACD;;AAED,YAAMG,IAAI,GAAGf,OAAO,CAACS,IAAR,CAAaE,OAAb,EAAsBK,KAAtB,CAA4B,GAA5B,CAAb;AACAd,QAAAA,UAAU,CAACe,KAAX,CAAiBC,GAAjB,CAAqBH,IAArB,EAA2Bf,OAAO,CAACmB,IAAR,GAAeC,IAAI,CAACC,KAAL,CAAWT,KAAX,CAAf,GAAmCA,KAA9D;AACD,OATD;AAUD,KAbD;;AAeA,QAAIZ,OAAO,CAACS,IAAZ,EAAkB;AAChBP,MAAAA,UAAU,CAACoB,EAAX,CAAc,OAAd,EAAuB,UAACC,OAAD,EAAa;AAClCA,QAAAA,OAAO,CAACb,OAAR,CAAgB,UAACc,MAAD,EAAY;AAC1BjB,UAAAA,MAAM,CAACC,IAAP,CAAYR,OAAO,CAACS,IAApB,EAA0BC,OAA1B,CAAkC,UAACC,OAAD,EAAa;AAC7C,gBAAIa,MAAM,CAACT,IAAP,CAAYU,IAAZ,CAAiB,GAAjB,EAAsBC,OAAtB,CAA8B1B,OAAO,CAACS,IAAR,CAAaE,OAAb,CAA9B,MAAyD,CAA7D,EAAgE;AAC9D,kBAAMC,KAAK,GAAGV,UAAU,CAACyB,QAAX,CAAoB3B,OAAO,CAACS,IAAR,CAAaE,OAAb,CAApB,CAAd;AAEAC,cAAAA,KAAK,KAAKgB,SAAV,GACI5B,OAAO,CAACK,MAAR,CAAewB,UAAf,CAA0B7B,OAAO,CAACc,MAAR,GAAiBH,OAA3C,CADJ,GAEIX,OAAO,CAACK,MAAR,CAAeyB,OAAf,CACE9B,OAAO,CAACc,MAAR,GAAiBH,OADnB,EAEEX,OAAO,CAACmB,IAAR,GAAeC,IAAI,CAACW,SAAL,CAAenB,KAAf,CAAf,GAAuCA,KAFzC,CAFJ;AAMD;AACF,WAXD;AAYD,SAbD;AAcD,OAfD;AAgBD;;AAED,WAAO;AACLoB,MAAAA,SAAS,sBACN/B,IADM,EACC,iCAAgBD,OAAhB,CADD;AADJ,KAAP;AAKD,GAxCM,CAAP;AAyCD,C","sourcesContent":["import { Module } from 'cerebral'\nimport StorageProvider from './StorageProvider'\n\nexport { default as StorageProviderError } from './StorageProviderError'\n\nexport default (options) => {\n  return Module(({ name, controller }) => {\n    controller.once('initialized:model', () => {\n      const targetStorage = options.target || localStorage\n\n      Object.keys(options.sync || {}).forEach((syncKey) => {\n        const value = targetStorage.getItem(options.prefix + syncKey)\n\n        if (!value) {\n          return\n        }\n\n        const path = options.sync[syncKey].split('.')\n        controller.model.set(path, options.json ? JSON.parse(value) : value)\n      })\n    })\n\n    if (options.sync) {\n      controller.on('flush', (changes) => {\n        changes.forEach((change) => {\n          Object.keys(options.sync).forEach((syncKey) => {\n            if (change.path.join('.').indexOf(options.sync[syncKey]) === 0) {\n              const value = controller.getState(options.sync[syncKey])\n\n              value === undefined\n                ? options.target.removeItem(options.prefix + syncKey)\n                : options.target.setItem(\n                    options.prefix + syncKey,\n                    options.json ? JSON.stringify(value) : value\n                  )\n            }\n          })\n        })\n      })\n    }\n\n    return {\n      providers: {\n        [name]: StorageProvider(options),\n      },\n    }\n  })\n}\n"],"file":"index.js"}